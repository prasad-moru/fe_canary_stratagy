name: Deploy React Application to AWS EKS

on:
  workflow_dispatch:

# on:
#   push:
#     branches:
#       - dev

env:
  AWS_REGION: 'us-east-1'
  ECR_REGISTRY: '897722665188.dkr.ecr.us-east-1.amazonaws.com'
  IMAGE_NAME: 'codebase/frontend'
  KUBERNETES_NAMESPACE: 'react-app'
  NODE_VERSION: '18'

jobs:
  deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Setup required tools
      run: |
        # Install kubectl if not present
        if ! command -v kubectl &> /dev/null; then
          echo "Installing kubectl..."
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
        fi
        
        # Install Helm if not present
        if ! command -v helm &> /dev/null; then
          echo "Installing Helm..."
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
        fi
        
        # Install yq if not present
        if ! command -v yq &> /dev/null; then
          echo "Installing yq..."
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.35.1/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq
        fi

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Cache Node.js modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Set Image Tag
      id: vars
      run: |
        IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)
        echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
        echo "Using image tag: ${IMAGE_TAG}"

    - name: Install dependencies
      run: npm ci

    - name: Build React Application
      run: npm run build
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # - name: Update Kubernetes configurations
    #   run: |
    #     echo "Updating Helm values with new image tag: ${{ env.IMAGE_TAG }}"
    #     yq eval ".image.tag = \"${{ env.IMAGE_TAG }}\"" -i helm/react-app/values.yaml
    #     cat helm/react-app/values.yaml

    # - name: Get Kubernetes context
    #   run: |
    #     aws eks update-kubeconfig --name your-cluster-name --region ${{ env.AWS_REGION }}
    #     kubectl get nodes

    # - name: Deploy to Kubernetes
    #   run: |
    #     echo "Deploying stable release..."
    #     helm upgrade --install react-app-stable helm/react-app \
    #       --namespace ${{ env.KUBERNETES_NAMESPACE }} \
    #       --create-namespace \
    #       --set release=stable \
    #       --atomic \
    #       --timeout 5m
          
    #     echo "Deploying canary release with new image tag: ${{ env.IMAGE_TAG }}"
    #     helm upgrade --install react-app-canary helm/react-app \
    #       --namespace ${{ env.KUBERNETES_NAMESPACE }} \
    #       --set release=canary \
    #       --set image.tag=${{ env.IMAGE_TAG }} \
    #       --atomic \
    #       --timeout 5m

    # - name: Verify deployment
    #   run: |
    #     kubectl get deployments -n ${{ env.KUBERNETES_NAMESPACE }}
    #     kubectl get pods -n ${{ env.KUBERNETES_NAMESPACE }}
    #     kubectl get services -n ${{ env.KUBERNETES_NAMESPACE }}

    # - name: Clean up
    #   if: always()
    #   run: |
    #     docker system prune -af
    #     echo "Cleanup completed"